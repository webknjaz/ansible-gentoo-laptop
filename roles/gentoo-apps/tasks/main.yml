---
- name: Ensure portage dirs structure exists
  file:
    dest: /etc/portage/package.{{ setting_type }}
    mode: u=rwx,g=rx,o=rx
    owner: root
    group: root
    state: directory
    recurse: yes
  loop:
  - accept_keywords
  - license
  - mask
  - unmask
  - use
  loop_control:
    loop_var: setting_type
- name: Accept package licenses
  lineinfile:
    create: yes
    line: >-
      {{ license_entry.package }}
      {{ license_entry.licenses }}
    path: >-
      /etc/portage/package.license/{{
          license_entry.package | replace('/', '--')
      }}
    state: present
  loop: >-
    {{
        accept_licenses |
        dict2items(key_name='package', value_name='licenses')
    }}
  loop_control:
    label: >-
      Accepting {{ license_entry.licenses }} terms
      for {{ license_entry.package }}
    loop_var: license_entry

- name: Ensure portage env dir structure exists
  file:
    dest: /etc/portage/env
    mode: u=rwx,g=rx,o=rx
    owner: root
    group: root
    state: directory
    recurse: yes
- name: Make `abi_x86_32.conf` env file
  copy:
    content: >-
      ABI_X86="32"
    dest: /etc/portage/env/abi_x86_32.conf
    mode: u+rw,g=r,o=r
    owner: root
    group: root
- name: Set up 32-bit-compatible package atoms
  lineinfile:
    create: yes
    line: >-
      {{ portage_package_atom }} abi_x86_32.conf
    path: /etc/portage/package.env
    regexp: ^{{ portage_package_atom }} [^\s]+$
    state: present
  loop: >-
    {{ x86_ebuilds }}
  loop_control:
    loop_var: portage_package_atom

- name: Create patch dirs structure
  file:
    dest: /etc/portage/patches/{{ item }}
    mode: u=rwx,g=rx,o=rx
    owner: root
    group: root
    state: directory
    recurse: yes
  loop:
  - app-emulation/virtualbox-modules-6.1.12-r1
  - dev-libs/cyrus-sasl-2.1.26
  - net-wireless/crda-3.18-r1
  - sys-auth/sssd-2.2.3

- name: Add ebuild user patches
  copy:
    src: "{{ item.1 }}"
    dest: /etc/portage/patches/{{ item.0 }}/
    mode: u+rw,g=r,o=r
    owner: root
    group: root
  loop:
  - - app-emulation/virtualbox-modules-6.1.12-r1
    - virtualbox-modules-6.1.12-r1-kernel-5.8-fixes_for_mm_struct.patch
  - - app-emulation/virtualbox-modules-6.1.12-r1
    - virtualbox-modules-6.1.12-r1-kernel-5.8-fixes_for_changes_in_cpu_tlbstate.patch
  - - app-emulation/virtualbox-modules-6.1.12-r1
    - virtualbox-modules-6.1.12-r1-kernel-5.8-fixes_for_module_memory.patch
  - - dev-libs/cyrus-sasl-2.1.26
    - cyrus-sasl-2.1.26-openssl-1.1.patch
  - - net-wireless/crda-3.18-r1
    - crda-openssl-1.1.patch
  - - sys-auth/sssd-2.2.3
    - sssd-2.2.3-glibc-2.32-compat.patch

- name: Set up ABI_X86 targets
  lineinfile:
    create: no
    line: >-
      ABI_X86="{{ abi_x86_targets | join(' ') }}"
    path: /etc/portage/make.conf
    regexp: ^ABI_X86="[^"]*"$
    state: present
  when: abi_x86_targets | length > 0

- name: Merge essential ebuilds
  portage:
    package: >-
      {{ essential_ebuilds }}
    state: emerged
    update: yes
    verbose: yes
    newuse: yes
    loadavg: "{{ emerge_load_average }}"
    jobs: "{{ emerge_jobs_number }}"
  notify:
  - ensure-services-started
  - ensure-services-reloaded

- name: Set up Python targets
  lineinfile:
    create: no
    line: >-
      PYTHON_TARGETS="python{{
          python_targets | map('replace', '.', '_') | join(' python')
      }}"
    path: /etc/portage/make.conf
    regexp: ^PYTHON_TARGETS="[^"]*"$
    state: present
  when: python_targets | length > 0

- name: Set up Ruby targets
  lineinfile:
    create: no
    line: >-
      RUBY_TARGETS="ruby{{ ruby_targets | map('replace', '.', '') | join(' ruby')
      }}"
    path: /etc/portage/make.conf
    regexp: ^RUBY_TARGETS="[^"]*"$
    state: present
  when: ruby_targets | length > 0

- name: Set up graphics card targets
  lineinfile:
    create: no
    line: >-
      VIDEO_CARDS="{{ video_card_targets | join(' ') }}"
    path: /etc/portage/make.conf
    regexp: ^VIDEO_CARDS="[^"]*"$
    state: present
  when: video_card_targets | length > 0

- name: Mask third-party overlays
  lineinfile:
    create: yes
    line: >-
      */*::{{ overlay }}
    path: >-
      /etc/portage/package.mask/third-party-overlay--{{ overlay }}
    state: present
  loop: >-
    {{ overlay_repositories }}
  loop_control:
    loop_var: overlay

- name: Allow certain packages from third-party overlays
  lineinfile:
    create: yes
    line: >-
      {{
        [overlay_package_entry.package, overlay_package_entry.overlay]
        | join('::')
      }}
    path: >-
      /etc/portage/package.unmask/third-party-overlay--{{
        overlay_package_entry.overlay
      }}
    state: present
  loop: >-
    {{
        ebuilds_from_overlays
        | combine(unmask_ebuilds)
        | dict2items(key_name='package', value_name='overlay')
    }}
  loop_control:
    label: >-
      Allowing {{
        [overlay_package_entry.package, overlay_package_entry.overlay]
        | join('::')
      }}
    loop_var: overlay_package_entry

- name: Install layman overlays
  shell: |
    set -euxo pipefail
    yes | layman -a {{ overlay }}
  args:
    creates: /var/lib/layman/{{ overlay }}
  loop: >-
    {{ overlay_repositories }}
  loop_control:
    loop_var: overlay
  register: layman_cmd
  changed_when: layman_cmd.rc == 141
  failed_when: >-
    layman_cmd.rc not in [0, 141] and
    ' was already installed' not in layman_cmd.stdout

- name: Sync layman overlays
  command: layman -S
  when: True

- name: Enable global USE-flags
  command: euse -E {{ use_flags_global_enabled | join(' ') }}
  when: use_flags_global_enabled | length > 0
  register: euse_cmd
  failed_when: >-
    euse_cmd.rc != 0 and
    'ERROR: ' in euse_cmd.stdout

- name: Disable global USE-flags
  command: euse -D {{ use_flags_global_disabled | join(' ') }}
  when: use_flags_global_disabled | length > 0
  register: euse_cmd
  failed_when: >-
    euse_cmd.rc != 0 and
    'ERROR: ' in euse_cmd.stdout

- name: Enable per-package USE-flags
  command: >-
    euse -p "{{ flags_entry.package }}"
    -E {{ flags_entry.use_flags | join(' ') }}
  register: euse_cmd
  changed_when:
  - euse_cmd.rc == 0
  - >-
    flags_entry.use_flags
    | map(
      'regex_replace',
      '^(.*)$',
      'WARNING: USE flag "\\1" is already enabled for ' + flags_entry.package
    )
    | intersect(euse_cmd.stdout_lines)
    | length
    !=
    flags_entry.use_flags | length
  failed_when: >-
    euse_cmd.rc != 0 and
    'ERROR: ' in euse_cmd.stdout
  loop: >-
    {{
        use_flags_per_package_enabled |
        dict2items(key_name='package', value_name='use_flags')
    }}
  loop_control:
    loop_var: flags_entry
  when: flags_entry.use_flags | length > 0

- name: Disable per-package USE-flags
  command: >-
    euse -p "{{ flags_entry.package }}"
    -D {{ flags_entry.use_flags | join(' ') }}
  register: euse_cmd
  changed_when:
  - euse_cmd.rc == 0
  - >-
    (
      flags_entry.use_flags
      | map(
        'regex_replace',
        '^(.*)$',
        'WARNING: USE flag "\\1" is already disabled for ' + flags_entry.package
      )
      | intersect(euse_cmd.stdout_lines)
      | length
    )
    !=
    (flags_entry.use_flags | length)
  failed_when: >-
    euse_cmd.rc != 0 and
    'ERROR: ' in euse_cmd.stdout
  loop: >-
    {{
        use_flags_per_package_disabled |
        dict2items(key_name='package', value_name='use_flags')
    }}
  loop_control:
    loop_var: flags_entry
  when: flags_entry.use_flags | length > 0

- name: Set up per-package accept keywords
  lineinfile:
    create: yes
    line: >-
      {{ package_keywords_entry.package }}
      {{ package_keywords_entry.keywords | join(' ') }}
    path: >-
      /etc/portage/package.accept_keywords/{{
        package_keywords_entry.package
        | replace('/', '--')
      }}--managed
    regexp: ^{{ package_keywords_entry.package }}\s+.*$
    state: present
  loop: >-
    {{
        accept_keywords_per_package |
        dict2items(key_name='package', value_name='keywords')
    }}
  loop_control:
    loop_var: package_keywords_entry
  when: package_keywords_entry.keywords | length > 0

- name: Merge ebuilds from the default Gentoo tree
  portage:
    package: >-
      {{
          ebuilds
          | map('regex_replace', '^(.*)$', '\1::gentoo')
          | list
      }}
    state: emerged
    update: yes
    verbose: yes
    newuse: yes
    loadavg: "{{ emerge_load_average }}"
    jobs: "{{ emerge_jobs_number }}"
  notify:
  - ensure-services-started
  - ensure-services-reloaded

- name: Merge ebuilds from third-party overlays
  portage:
    package: >-
      {{
          ebuilds_from_overlays.items()
          | map('join', '::')
          | list
      }}
    state: emerged
    update: yes
    verbose: yes
    newuse: yes
    loadavg: "{{ emerge_load_average }}"
    jobs: "{{ emerge_jobs_number }}"
  notify:
  - ensure-services-started
  - ensure-services-reloaded

- name: Ensure Vagga installed
  shell: |
    set -euxo pipefail
    curl -sSf https://files.zerogw.com/vagga/vagga-install{{ '-testing' if vagga_testing else '' }}.sh | sh
  args:
    creates: /usr/bin/vagga
- name: Check kernel.unprivileged_userns_clone sysctl value
  command: sysctl kernel.unprivileged_userns_clone
  register: sysctl_cmd
  changed_when: false
  failed_when: >
    (sysctl_cmd.rc != 0 and
     'sysctl: cannot stat /proc/sys/kernel/unprivileged_userns_clone: No such file or directory'
     not in sysctl_cmd.stderr_lines) or
    (sysctl_cmd.rc == 0 and
     'kernel.unprivileged_userns_clone = 0'
     in sysctl_cmd.stdout_lines)
- name: Set up subuid/subgid
  lineinfile:
    create: yes
    line: wk:100000:65536
    path: /etc/sub{{ item }}id
    state: present
  with_items:
  - u
  - g

- name: Load 'tun' kernel module
  modprobe:
    name: tun
    state: present

- name: Configure 'tun' module autoload
  lineinfile:
    create: yes
    line: tun
    path: /etc/modules-load.d/tun.conf

- name: Add a wk group
  group:
    gid: 1000
    name: wk
    state: present

- name: Add wk to docker group
  user:
    append: yes
    comment: Sviat
    createhome: yes
    group: wk
    groups:
    - docker
    name: wk
    password: >-
      {{ user_pass }}
    shell: /bin/zsh
    state: present
    uid: 1000

- name: Add wk to sudoers
  lineinfile:
    create: yes
    group: root
    line: wk ALL=(ALL) ALL
    mode: u=r,g=r,o=
    owner: root
    path: /etc/sudoers.d/wk-user
    regexp: ^wk\s[^=]+=[^=]+$
    state: present

- name: Configure network printer lookup in CUPS
  lineinfile:
    insertafter: "# Use BrowsePoll to poll a particular CUPS server"
    line: BrowsePoll cups.brq.redhat.com
    path: /etc/cups/cups-browsed.conf
    regexp: ^BrowsePoll\scups.brq.redhat.com$
    state: present
  notify:
  - ensure-services-started
- name: Configure remote network printer naming in CUPS
  lineinfile:
    insertafter: "# LocalQueueNamingRemoteCUPS RemoteName"
    line: LocalQueueNamingRemoteCUPS RemoteName
    path: /etc/cups/cups-browsed.conf
    regexp: ^LocalQueueNamingRemoteCUPS\sRemoteName$
    state: present
  notify:
  - ensure-services-started

- name: Enable the Bluetooth Fast Connectable setting
  lineinfile:
    insertafter: "#FastConnectable = false"
    line: FastConnectable = true
    path: /etc/bluetooth/main.conf
    regexp: ^FastConnectable\s=\strue$
    state: present
  notify:
  - ensure-services-started

- name: Set up Kerberos
  template:
    src: krb5.conf.template
    dest: /etc/krb5.conf
  notify:
  - ensure-services-started
- name: Create PKI IPA dir structure for FEDORAPROJECT.ORG certificates
  file:
    dest: /etc/pki/ipa
    mode: u=rwx,g=rx,o=rx
    owner: root
    group: root
    state: directory
    recurse: yes
- name: Get IPA certificate for FEDORAPROJECT.ORG
  get_url:
    url: https://pagure.io/fedora-packager/raw/b97ff3d8e4636e46a8d9be10d935d73e56e56f1b/f/ipa_ca/fedoraproject_ipa_ca.crt
    dest: /etc/pki/ipa/
    checksum: sha256:{{ expected_sha256checksum }}
  vars:
    expected_sha256checksum: >-
      c9d382a0474b09d91fa8a9d3056b8ca35075ab3876fe55a07aaa5f0fa712937a
  notify:
  - ensure-services-started
- name: Verify downloaded FEDORAPROJECT.ORG IPA certificate
  shell: |
    set -euxo pipefail
    openssl x509 -noout \
      -in '/etc/pki/ipa/fedoraproject_ipa_ca.crt' \
      -fingerprint \
      -sha256 | grep 'sha256 Fingerprint={{ expected_sha256fingerprint }}'
  vars:
    expected_sha256fingerprint: >-
      29:70:18:6F:58:89:AA:08:BA:33:51:D0:3E:27:68:4C:3D:DA:33:87:2C:5C:36:4A:3B:4D:03:A6:17:30:6B:C6
  register: sha256fingerprint
  changed_when: false
  failed_when: >
    sha256fingerprint.rc != 0 or
    sha256fingerprint.stdout != (('sha256 Fingerprint', expected_sha256fingerprint) | join('='))
- name: Set up sssd
  template:
    src: sssd.conf.template
    dest: /etc/sssd/sssd.conf
    mode: u=rw,g=,o=
  notify:
  - ensure-services-started
- name: Connect sssd to nsswitch
  lineinfile:
    line: >-
      {{ nss_entry.name }}:
      {{ nss_entry.sources | join(' ') }}
    path: /etc/nsswitch.conf
    regexp: ^{{ nss_entry.name }}:\s+.*$
    state: present
  loop:
  - name: passwd
    sources:
    - sss
    - files
    - systemd
  - name: group
    sources:
    - sss
    - files
    - >-
      [SUCCESS=merge]
    - systemd
  - name: shadow
    sources:
    - sss
    - files
    - >-
      [UNAVAIL=return]
    - systemd
  - name: gshadow
    sources:
    - sss
    - files
    - systemd
  - name: services
    sources:
    - sss
    - files
  - name: netgroup
    sources:
    - sss
    - files
  - name: automount
    sources:
    - sss
    - files
  loop_control:
    label: >-
      Setting up nss for {{ nss_entry.name }}
    loop_var: nss_entry
- name: Point PAM to sssd
  copy:
    src: etc/pam.d/system-auth
    dest: /etc/pam.d/system-auth
  notify:
  - ensure-services-started
  - ensure-services-reloaded

- name: Create config dir structure for OpenVPN clients
  file:
    dest: /etc/openvpn/client
    mode: u=rwx,g=rx,o=rx
    owner: root
    group: root
    state: directory
    recurse: yes
- name: Add OpenVPN client configs
  copy:
    dest: /etc/openvpn/client/{{ config_file }}
    group: root
    mode: u=r,g=,o=
    owner: root
    src: >-
      {{ src_config }}
  vars:
    src_config: >-
      {{
          lookup(
            'first_found',
            [
                inventory_hostname + '/etc/openvpn/client/' + config_file,
                'etc/openvpn/client/' + config_file,
            ],
          )
      }}
  loop:
  - redhat-brq.conf
  - rh-username
  - turris-catch-all.conf
  loop_control:
    loop_var: config_file
  notify:
  - ensure-services-started
  - ensure-services-reloaded

- name: Create config dir structure for DNSmasq under NetworkManager
  file:
    dest: /etc/NetworkManager/dnsmasq.d
    mode: u=rwx,g=rx,o=rx
    owner: root
    group: root
    state: directory
    recurse: yes
- name: Set up DNSmasq configs under NetworkManager
  template:
    src: networkmanager.dnsmasq.redhat.conf.j2
    dest: /etc/NetworkManager/dnsmasq.d/redhat.conf
  notify:
  - ensure-services-started
  - ensure-services-reloaded
- name: Enable DNSmasq in NetworkManager
  copy:
    src: etc/NetworkManager/conf.d/dnsmasq.conf
    dest: /etc/NetworkManager/conf.d/dnsmasq.conf
  notify:
  - ensure-services-started
  - ensure-services-reloaded
- name: Force all notified handlers to run
  meta: flush_handlers

- name: Set up X.Org X11 server subsystem
  copy:
    src: etc/X11/xorg.conf
    dest: /etc/X11/xorg.conf
    mode: u+rw,g=r,o=r
    owner: root
    group: root
  when: ansible_product_version == 'ThinkPad P50'

- name: Set up X11 keyboard layout
  command: >-
    localectl set-x11-keymap
    'us,ua' pc104 qwerty 'grp:caps_toggle,compose:ralt'
  when: true

- name: Set up Virtual Console keyboard layout
  command: localectl set-keymap us ua --no-convert
  when: true

- name: Set up udev rules
  copy:
    src: etc/udev/rules.d/{{ udev_rule.file }}
    dest: /etc/udev/rules.d/{{ udev_rule.file }}
    mode: u+rw,g=r,o=r
    owner: root
    group: root
  loop:
  - label: make Android devices accessible by plugdev group
    file: 51-android.rules
  - label: enable support for F1-F12 in Keychron keyboards
    file: 80-keychron.rules
  loop_control:
    label: >-
      {{ udev_rule.label }}
    loop_var: udev_rule
  notify:
  - update-udev-rules

- name: Prevent autosuspend in systemd-logind on lid close when docked
  lineinfile:
    create: no
    insertafter: "#{{ item.name }}={{ item.commented_state }}"
    line: >-
      {{ item.name }}=ignore
    path: /etc/systemd/logind.conf
    regexp: ^{{ item.name }}="[^"]*"$
    state: present
  loop:
  - name: HandleLidSwitchDocked
    commented_state: ignore
  - name: HandleLidSwitchExternalPower
    commented_state: suspend
  notify:
  - ensure-services-started
  - ensure-services-reloaded

- name: Create config dir structure for Google Chrome and Chromium
  file:
    dest: "{{ item.key }}"
    mode: "{{ item.value }}"
    owner: root
    group: root
    state: directory
    recurse: yes
  with_dict:
    /etc/chromium/policies/managed/: u+rwx,g=rx,o=rx
    /etc/chromium/policies/recommended/: u+rwx,g=rwx,o=rx
    /etc/opt/chrome/policies/managed/: u+rwx,g=rx,o=rx
    /etc/opt/chrome/policies/recommended/: u+rwx,g=rwx,o=rx
- name: Set up policies with whitelisted Kerberos servers for Google Chrome and Chromium
  copy:
    content: >-
      {{ policy_file[1].content | to_nice_json(indent=4) }}
    dest: >-
      {{ policy_file[0] }}/{{ policy_file[1].name }}.json
    mode: u=rw,g=r,o=r
    owner: root
    group: root
  loop: >-
    {{
        [
            '/etc/chromium/policies/managed',
            '/etc/opt/chrome/policies/managed',
        ]
        | product(
            chrome_managed_policies
            | dict2items(key_name='name', value_name='content'),
        )
        | list
    }}
  loop_control:
    label: >-
      Policy: {{ policy_file[1].name }}
    loop_var: policy_file

- name: Create config dir structure for system-wide Firefox configuration
  file:
    dest: /etc/firefox/policies
    mode: u+rwx,g=rwx,o=rx
    owner: root
    group: root
    state: directory
    recurse: yes
- name: Set up policies with allowlisted Kerberos servers for Firefox
  copy:
    content: >-
      {{ firefox_managed_policies | ansible.builtin.to_nice_json(indent=4) }}
    dest: /etc/firefox/policies/policies.json
    mode: u=rw,g=r,o=r
    owner: root
    group: root

- name: Ensure userspace config dir for Qutebrowser configuration exists
  become: no
  file:
    dest: $HOME/.config/qutebrowser/
    mode: u+rwx,g=rx,o=rx
    state: directory
    recurse: yes
- name: Configure userspace Qutebrowser to work with Kerberos
  become: no
  lineinfile:
    create: yes
    line: >-
      {{ config_line }}
    dest: $HOME/.config/qutebrowser/config.py
    state: present
  loop:
  - >-
    c.qt.args = [
      "auth-server-allowlist=*.fedoraproject.org,*.redhat.com",
      "auth-server-whitelist=*.fedoraproject.org,*.redhat.com",
      "disable-auth-negotiate-cname-lookup=true",
    ]
  - >-
    config.load_autoconfig()
  loop_control:
    loop_var: config_line

- name: Create a custom trusted CA certificates dir
  file:
    dest: "{{ item.key }}"
    mode: "{{ item.value }}"
    owner: root
    group: root
    state: directory
    recurse: yes
  with_dict:
    /usr/local/share/ca-certificates/: u+rwx,g=rx,o=rx
    /etc/pki/nssdb/: u+rwx,g=rx,o=rx
- name: Create a custom trusted CA certificates user dir
  become: no
  file:
    dest: $HOME/.pki/nssdb/
    mode: u+rwx,g=rx,o=rx
    state: directory
    recurse: yes
- name: Copy the RH IT Root CA certificates into system
  ansible.builtin.copy:
    src: usr/local/share/ca-certificates/{{ cert_filename }}
    dest: /usr/local/share/ca-certificates/{{ cert_filename }}
    mode: u+rw,g=r,o=r
    owner: root
    group: root
  loop: >-
    {{ ca_certificates }}
  loop_control:
    loop_var: cert_filename
  notify:
  - update-ca-trust
- name: Install CA certs into NSS database  # noqa 301  # FIXME
  # TODO: check out https://galaxy.ansible.com/pixelart/nssdb
  ansible.builtin.command: >-
    certutil
    -A
    -n '{{ cert_filename | ansible.builtin.basename }}'
    -t C
    -i '/usr/local/share/ca-certificates/{{ cert_filename }}'
    -d sql:/etc/pki/nssdb
  loop: >-
    {{ ca_certificates }}
  loop_control:
    loop_var: cert_filename
- name: Install CA certs into per-user NSS database, used by Chrome/Firefox  # noqa 301  # FIXME
  become: no
  ansible.builtin.shell: >-
    certutil
    -A
    -n '{{ cert_filename | ansible.builtin.basename }}'
    -t C
    -i '/usr/local/share/ca-certificates/{{ cert_filename }}'
    -d sql:$HOME/.pki/nssdb
  loop: >-
    {{ ca_certificates }}
  loop_control:
    loop_var: cert_filename

- name: Ensure NetworkManager connections directory is in place
  file:
    dest: /etc/NetworkManager/system-connections/
    mode: u+rwx,g=rx,o=rx
    owner: root
    group: root
    state: directory
    recurse: yes
- name: Copy the NetworkManager connections into system
  ansible.builtin.copy:
    src: etc/NetworkManager/system-connections/{{ nm_conn_filename }}
    dest: /etc/NetworkManager/system-connections/{{ nm_conn_filename }}
    mode: u+rw,g=,o=
    owner: root
    group: root
  loop: >-
    {{ networkmanager_connection_profiles }}
  loop_control:
    loop_var: nm_conn_filename
  notify:
  - nm-load-connections

- name: Ensure xinitrc.d dir exists
  file:
    dest: /etc/X11/xinit/xinitrc.d/
    mode: u=rwx,g=rx,o=rx
    owner: root
    group: root
    state: directory
    recurse: yes
- name: Set up display positioning
  copy:
    src: etc/X11/xinit/xinitrc.d/95-monitor-positioning
    dest: /etc/X11/xinit/xinitrc.d/95-monitor-positioning
    mode: u+rwx,g=rx,o=rx
    owner: root
    group: root

- name: Ensure modprobe.d dir exists
  file:
    dest: /etc/modprobe.d/
    mode: u=rwx,g=rx,o=rx
    owner: root
    group: root
    state: directory
    recurse: yes
- name: Set up kernel module configs
  copy:
    src: etc/modprobe.d/{{ item }}
    dest: /etc/modprobe.d/{{ item }}
    mode: u+rw,g=r,o=r
    owner: root
    group: root
  loop:
  - hid_apple.conf
  - snd_usb_audio_scarlett_2i2_gen3.conf
  - thinkpad.conf
