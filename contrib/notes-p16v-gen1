
>>> Installing (6 of 6) sys-process/glances-4.0.6::gentoo
 * Install additional packages for optional runtime features:
 *   dev-python/zeroconf for Autodiscover mode
 *   dev-python/docker for Docker monitoring support
 *   dev-python/pygal for SVG graph support
 *   dev-python/netifaces for IP plugin
 *   dev-python/pymdstat for RAID monitoring
 *   dev-python/pymdstat for RAID support
 *   dev-python/pysnmp for SNMP support
 *   net-wireless/python-wifi for WIFI plugin

>>> Recording sys-process/glances in "world" favorites file...

>>> Completed (6 of 6) sys-process/glances-4.0.6::gentoo

 * Messages for package sys-apps/ripgrep-all-0.10.6:

 * Install additional packages for optional runtime features:
 *   virtual/pandoc for pandoc support

 * Messages for package sys-process/glances-4.0.6:

 * Install additional packages for optional runtime features:
 *   dev-python/zeroconf for Autodiscover mode
 *   dev-python/docker for Docker monitoring support
 *   dev-python/pygal for SVG graph support
 *   dev-python/netifaces for IP plugin
 *   dev-python/pymdstat for RAID monitoring
 *   dev-python/pymdstat for RAID support
 *   dev-python/pysnmp for SNMP support
 *   net-wireless/python-wifi for WIFI plugin

 * GNU info directory index is up-to-date.

 * IMPORTANT: 22 news items need reading for repository 'gentoo'.
 * Use eselect news read to view new items.



 * Messages for package app-eselect/eselect-wxwidgets-20230114-r1:

 * This eselect module only controls the version of wxGTK used when
 * building packages outside of portage.  If you are not doing development
 * with wxWidgets or bakefile you will never need to use it.

 * Messages for package app-misc/spacenavd-1.2:

 * To start the Spacenav daemon system-wide by default
 * you should add it to the default runlevel :
 * `rc-update add spacenavd default` (for openRC)
 * `systemctl enable spacenavd` (for systemd)
 * 
 * To start generating Spacenav X events by default
 * you should add this command in your user startup
 * scripts such as .gnomerc or .xinitrc :
 * `spnavd_ctl x11 start`
 * 
 * If you want to auto-start the daemon when you plug in
 * a SpaceNavigator device, activate the related udev rule :
 * `sudo ln -s /usr/lib/udev/rules.d/99-space-navigator.rules.ignored /etc/udev/rules.d`
 * You must restart spnavd `/etc/init.d/spacenavd restart` to run
 * the new version of the daemon or `systemctl restart spacenavd`
 * if using systemd.

 * Messages for package dev-python/fs-2.4.16:

 * Install additional packages for optional runtime features:
 *   dev-python/boto for S3 support
 *   dev-python/paramiko for SFTP support
 *   dev-python/wxpython for Browser support

 * Messages for package media-gfx/freecad-0.21.2-r3:

 * Computational utilities
 *   sci-libs/openblas for BLAS library
 *   dev-python/pandas for Statistical computation with Python
 *   dev-python/scipy for Use scientific computation with Python
 *   dev-python/sympy for Use symbolic math with Python
 * Imaging, Plotting and Rendering utilities
 *   media-gfx/graphviz for Dependency graphs
 *   media-gfx/povray for PBR Rendering
 * Import / Export
 *   dev-python/pycollada for Work with COLLADA documents
 *   media-gfx/libredwg for Importing and exporting 2D AutoCAD DWG files
 *   sci-libs/gdal for Importing and exporting geospatial data formats
 * Meshing and FEM
 *   sci-libs/gmsh for FEM mesh generator
 *   sci-libs/gts for Triangulating meshes
 *   sci-visualization/paraview for Visualization


 ------

 

 * Messages for package sys-firmware/edk2-bin-202202:

 * This package contains the tianocore edk2 UEFI firmware for 64-bit x86
 * virtual machines. The firmware is located under
 * /usr/share/edk2-ovmf/OVMF_CODE.fd
 * /usr/share/edk2-ovmf/OVMF_VARS.fd
 * /usr/share/edk2-ovmf/OVMF_CODE.secboot.fd
 * 
 * If USE=binary is enabled, we also install an OVMF variables file (coming from
 * fedora) that contains secureboot default keys
 * 
 * /usr/share/edk2-ovmf/OVMF_VARS.secboot.fd
 * 
 * If you have compiled this package by hand, you need to either populate all
 * necessary EFI variables by hand by booting
 * /usr/share/edk2-ovmf/UefiShell.(iso|img)
 * or creating OVMF_VARS.secboot.fd by hand:
 * https://github.com/puiterwijk/qemu-ovmf-secureboot
 * 
 * The firmware does not support csm (due to no free csm implementation
 * available). If you need a firmware with csm support you have to download
 * one for yourself. Firmware blobs are commonly labeled
 * OVMF{,_CODE,_VARS}-with-csm.fd
 * 
 * In order to use the firmware you can run qemu the following way
 * 
 * $ qemu-system-x86_64 \
 * -drive file=/usr/share/edk2-ovmf/OVMF.fd,if=pflash,format=raw,unit=0,readonly=on \
 * ...
 * 
 * (Note: Above message is only printed the first time package is
 * installed. Please look at /usr/share/doc/edk2-bin-202202/README.gentoo*
 * for future reference)

 * Messages for package app-emulation/qemu-9.1.2:

 * If you don't have kvm compiled into the kernel, make sure you have the
 * kernel module loaded before running kvm. The easiest way to ensure that the
 * kernel module is loaded is to load it on boot.
 * For AMD CPUs the module is called 'kvm-amd'.
 * For Intel CPUs the module is called 'kvm-intel'.
 * Please review /etc/conf.d/modules for how to load these.
 * 
 * Make sure your user is in the 'kvm' group. Just run
 * $ gpasswd -a <USER> kvm
 * then have <USER> re-login.
 * 
 * For brand new installs, the default permissions on /dev/kvm might not let
 * you access it.  You can tell udev to reset ownership/perms:
 * $ udevadm trigger -c add /dev/kvm
 * 
 * If you want to register binfmt handlers for qemu user targets:
 * For openrc:
 * # rc-update add qemu-binfmt
 * For systemd:
 * # ln -s /usr/share/qemu/binfmt.d/qemu.conf /etc/binfmt.d/qemu.conf
 * 
 * (Note: Above message is only printed the first time package is
 * installed. Please look at /usr/share/doc/qemu-9.1.2/README.gentoo*
 * for future reference)

 * GNU info directory index is up-to-date.

 * IMPORTANT: 25 news items need reading for repository 'gentoo'.
 * Use eselect news read to view new items.
